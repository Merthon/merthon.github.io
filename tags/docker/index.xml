<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Merthon</title><link>https://merthon.github.io/tags/docker/</link><description>Recent content in Docker on Merthon</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 05 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://merthon.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL数据库安装</title><link>https://merthon.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 05 Jan 2025 13:55:51 +0800</pubDate><guid>https://merthon.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="1安装">1.安装&lt;/h1>
&lt;p>首先，确保你在 OrbStack 上安装了 Docker，然后拉取 MySQL 镜像。&lt;/p>
&lt;ol>
&lt;li>打开 OrbStack，进入终端。&lt;/li>
&lt;li>执行以下命令来拉取 MySQL 镜像：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker pull mysql:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这会从 Docker Hub 拉取最新版的 MySQL 镜像。&lt;/p>
&lt;h1 id="2启动">2.启动&lt;/h1>
&lt;p>接下来，我们可以启动一个 MySQL 容器并配置它。运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run --name mysql-container -e MYSQL_ROOT_PASSWORD&lt;span style="color:#f92672">=&lt;/span>root -p 3306:3306 -d mysql:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解释：&lt;/p>
&lt;ul>
&lt;li>&lt;code>--name mysql-container&lt;/code>：指定容器的名字为 &lt;code>mysql-container&lt;/code>。&lt;/li>
&lt;li>&lt;code>-e MYSQL_ROOT_PASSWORD=root&lt;/code>：设置 MySQL 的 root 用户密码为 &lt;code>root&lt;/code>（你可以换成更强的密码）。&lt;/li>
&lt;li>&lt;code>-p 3306:3306&lt;/code>：将容器的 3306 端口映射到本机的 3306 端口，方便你从外部连接。&lt;/li>
&lt;li>&lt;code>-d mysql:latest&lt;/code>：在后台运行 MySQL 容器，使用最新版的 MySQL 镜像&lt;/li>
&lt;/ul>
&lt;h1 id="3检查">3.检查&lt;/h1>
&lt;p>你可以用以下命令检查容器是否启动成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一切正常，你会看到类似如下的输出，表示 MySQL 容器正在运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>abcd1234efgh mysql:latest &lt;span style="color:#e6db74">&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> seconds ago Up &lt;span style="color:#ae81ff">3&lt;/span> seconds 0.0.0.0:3306-&amp;gt;3306/tcp mysql-container
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="4进入-mysql-容器并连接数据库">4.进入 MySQL 容器并连接数据库&lt;/h1>
&lt;p>接下来，进入容器并连接 MySQL。&lt;/p></description></item><item><title>RabbitMQ安装</title><link>https://merthon.github.io/posts/rabbitmq%E5%AE%89%E8%A3%85/</link><pubDate>Sat, 04 Jan 2025 11:01:01 +0800</pubDate><guid>https://merthon.github.io/posts/rabbitmq%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="拉取-rabbitmq-镜像">拉取 RabbitMQ 镜像&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker pull rabbitmq:management
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>rabbitmq:management&lt;/code> 镜像包含 RabbitMQ 和一个基于浏览器的管理界面，推荐使用。&lt;/p>
&lt;h1 id="启动-rabbitmq-容器">启动 RabbitMQ 容器&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d --name rabbitmq &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 5672:5672 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 15672:15672 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /Users/chenx/Workspace/rabbitmq-data:/var/lib/rabbitmq &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> rabbitmq:management
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--name rabbitmq&lt;/code>：容器名称为 &lt;code>rabbitmq&lt;/code>。&lt;/li>
&lt;li>&lt;code>-p 5672:5672&lt;/code>：映射 AMQP 通信端口。&lt;/li>
&lt;li>&lt;code>-p 15672:15672&lt;/code>：映射管理界面端口。&lt;/li>
&lt;li>&lt;code>-v /Users/chenx/Workspace/rabbitmq-data:/var/lib/rabbitmq&lt;/code>：将 RabbitMQ 数据存储在指定路径下。&lt;/li>
&lt;/ul>
&lt;h1 id="验证安装是否成功">验证安装是否成功&lt;/h1>
&lt;h4 id="访问-rabbitmq-管理界面">&lt;strong>访问 RabbitMQ 管理界面：&lt;/strong>&lt;/h4>
&lt;p>打开浏览器并访问 http://localhost:15672。&lt;br>
默认的用户名和密码是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>用户名&lt;/strong>: &lt;code>guest&lt;/code>&lt;/li>
&lt;li>&lt;strong>密码&lt;/strong>: &lt;code>guest&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="使用-docker-命令直接管理">使用 Docker 命令直接管理&lt;/h1>
&lt;p>可以通过 &lt;code>docker exec&lt;/code> 在容器中直接执行 RabbitMQ 管理命令，无需进入容器交互式 shell。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker exec rabbitmq rabbitmqctl add_user &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker exec rabbitmq rabbitmqctl set_user_tags &amp;lt;username&amp;gt; administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker exec rabbitmq rabbitmqctl set_permissions -p / &amp;lt;username&amp;gt; &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="注意事项">注意事项&lt;/h1>
&lt;p>&lt;strong>删除默认用户&lt;/strong>&lt;/p></description></item><item><title>Redis安装</title><link>https://merthon.github.io/posts/redis%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 03 Jan 2025 14:11:27 +0800</pubDate><guid>https://merthon.github.io/posts/redis%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="安装">安装&lt;/h1>
&lt;p>运行以下命令从 Docker Hub 获取最新的 Redis 镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker pull redis:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="创建-redis-容器">创建 Redis 容器&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name redis &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 6379:6379 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /Users/chenx/Workspace/redis-data:/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> redis:latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> redis-server --save &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> --loglevel warning
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="参数解释">参数解释：&lt;/h4>
&lt;ul>
&lt;li>&lt;code>-d&lt;/code>：以守护进程方式运行容器。&lt;/li>
&lt;li>&lt;code>--name redis&lt;/code>：为容器指定名称为 &lt;code>redis&lt;/code>。&lt;/li>
&lt;li>&lt;code>-p 6379:6379&lt;/code>：将宿主机的 6379 端口映射到容器的 6379 端口。&lt;/li>
&lt;li>&lt;code>-v /Users/chenx/Workspace/redis-data:/data&lt;/code>：将 Redis 的数据存储在指定目录中，方便持久化。&lt;/li>
&lt;li>&lt;code>redis:latest&lt;/code>：使用最新的 Redis 镜像。&lt;/li>
&lt;li>&lt;code>redis-server --save 60 1 --loglevel warning&lt;/code>：启动 Redis 服务器并配置保存和日志级别参数。&lt;/li>
&lt;/ul>
&lt;h1 id="验证安装">验证安装&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进入-redis-容器使用-redis-cli">进入 Redis 容器使用 &lt;code>redis-cli&lt;/code>&lt;/h2>
&lt;p>Redis 容器自带 &lt;code>redis-cli&lt;/code> 工具，你可以直接进入容器运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker exec -it redis sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在容器内，运行以下命令：&lt;/p></description></item><item><title>MongoDB数据库安装</title><link>https://merthon.github.io/posts/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 03 Jan 2025 01:55:51 +0800</pubDate><guid>https://merthon.github.io/posts/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="拉取-mongodb-镜像">拉取 MongoDB 镜像&lt;/h1>
&lt;ol>
&lt;li>打开终端，拉取官方 MongoDB Docker 镜像：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker pull mongo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>如果需要特定版本的 MongoDB，可以指定版本号：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker pull mongo:6.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="创建-mongodb-容器">创建 MongoDB 容器&lt;/h1>
&lt;p>运行以下命令启动 MongoDB 容器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name mongodb &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 27017:27017 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /path/to/mongodb/data:/data/db &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e MONGO_INITDB_ROOT_USERNAME&lt;span style="color:#f92672">=&lt;/span>admin &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e MONGO_INITDB_ROOT_PASSWORD&lt;span style="color:#f92672">=&lt;/span>yourpassword &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> mongo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--name mongodb&lt;/code>：指定容器名称。&lt;/li>
&lt;li>&lt;code>-p 27017:27017&lt;/code>：将 MongoDB 的默认端口映射到主机端口。&lt;/li>
&lt;li>&lt;code>-v /path/to/mongodb/data:/data/db&lt;/code>：将数据文件存储在主机路径中，替换 &lt;code>/path/to/mongodb/data&lt;/code> 为实际路径（建议将路径指向你的工作目录）。&lt;/li>
&lt;li>&lt;code>-e MONGO_INITDB_ROOT_USERNAME=admin&lt;/code> 和 &lt;code>-e MONGO_INITDB_ROOT_PASSWORD=yourpassword&lt;/code>：设置 MongoDB 的管理员用户名和密码。&lt;/li>
&lt;/ul>
&lt;h1 id="验证-mongodb-容器状态">验证 MongoDB 容器状态&lt;/h1>
&lt;p>查看 MongoDB 容器是否运行成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>