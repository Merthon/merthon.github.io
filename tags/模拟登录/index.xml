<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>模拟登录 on Merthon</title><link>http://localhost:1313/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</link><description>Recent content in 模拟登录 on Merthon</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 09 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/index.xml" rel="self" type="application/rss+xml"/><item><title>基于Session和Cookie的模拟登录</title><link>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Esession%E5%92%8Ccookie%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</link><pubDate>Thu, 09 Jan 2025 22:15:35 +0800</pubDate><guid>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Esession%E5%92%8Ccookie%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</guid><description>&lt;h1 id="原理">原理&lt;/h1>
&lt;p>通过浏览器登录某个网站时，服务器会创建一个 &lt;strong>Session&lt;/strong>，并通过 &lt;strong>Cookie&lt;/strong> 存储在客户端（即浏览器）中。每当你访问网站时，浏览器会自动将这些 Cookie 包含在请求中，告知服务器你是一个已经登录的用户，从而获得相应的权限。
在爬虫中模拟登录时，我们需要使用 &lt;code>requests.Session()&lt;/code> 来维护会话（Session），并通过 &lt;code>requests.Session().cookies&lt;/code> 来保存和使用 Cookie，以便后续请求能够模拟登录后的行为。&lt;/p>
&lt;h1 id="步骤">步骤&lt;/h1>
&lt;ol>
&lt;li>发送 GET 请求获取登录页面
我们需要发送 GET 请求获取登录页面。这是为了获取可能包含的隐藏字段（如 CSRF token）以及初始的 Cookie。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 登录页面的 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://example.com/login&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 创建一个会话对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>Session()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送 GET 请求获取登录页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>get(login_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 打印返回的 HTML 内容，查看页面结构，特别是是否有 CSRF token 等&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(response&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>解析页面中的隐藏字段（例如 CSRF token）
多网站会使用 CSRF token 来防止跨站请求伪造，登录请求中必须包含正确的 CSRF token。我们需要从登录页面中提取这个 token。&lt;/li>
&lt;/ol>
&lt;p>这里使用 &lt;code>BeautifulSoup&lt;/code> 来解析 HTML 页面并提取隐藏字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> bs4 &lt;span style="color:#f92672">import&lt;/span> BeautifulSoup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 解析 HTML 页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>soup &lt;span style="color:#f92672">=&lt;/span> BeautifulSoup(response&lt;span style="color:#f92672">.&lt;/span>text, &lt;span style="color:#e6db74">&amp;#39;html.parser&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 假设 CSRF token 存储在一个名为 csrf_token 的 input 标签中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csrf_token &lt;span style="color:#f92672">=&lt;/span> soup&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;csrf_token&amp;#39;&lt;/span>})[&lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>构建登录请求的表单数据
我们已经从页面中获取到了 CSRF token，现在我们可以构造一个包含用户名、密码和 CSRF token 的字典作为表单数据。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 构造登录表单数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_data &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_username&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;password&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_password&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;csrf_token&amp;#39;&lt;/span>: csrf_token, &lt;span style="color:#75715e"># 包含 CSRF token&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>发送 POST 请求提交登录表单
使用 &lt;code>requests.Session()&lt;/code> 提交 POST 请求登录，并使用 &lt;code>session&lt;/code> 对象保持会话，以便后续请求能够带上登录状态。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送 POST 请求进行登录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_response &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>post(login_url, data&lt;span style="color:#f92672">=&lt;/span>login_data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 检查登录是否成功&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> login_response&lt;span style="color:#f92672">.&lt;/span>ok:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录成功&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录失败&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>访问需要身份认证的页面
登录成功后，我们就可以使用 &lt;code>session&lt;/code> 对象继续发送请求，访问需要登录权限的页面。由于 &lt;code>session&lt;/code> 会自动管理 Cookie，所有后续请求会自动带上登录信息（如 &lt;code>session_id&lt;/code>）。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 登录成功后访问受保护的页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protected_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://example.com/protected_page&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protected_page &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>get(protected_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 打印受保护页面的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(protected_page&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="demo">demo&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> bs4 &lt;span style="color:#f92672">import&lt;/span> BeautifulSoup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 登录页面 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://example.com/login&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 受保护页面 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protected_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://example.com/protected_page&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 创建一个会话对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>Session()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送 GET 请求获取登录页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>get(login_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>ok:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;无法访问登录页面&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 解析页面，提取 CSRF token&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>soup &lt;span style="color:#f92672">=&lt;/span> BeautifulSoup(response&lt;span style="color:#f92672">.&lt;/span>text, &lt;span style="color:#e6db74">&amp;#39;html.parser&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csrf_token &lt;span style="color:#f92672">=&lt;/span> soup&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;csrf_token&amp;#39;&lt;/span>})[&lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 构造登录表单数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_data &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_username&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;password&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_password&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;csrf_token&amp;#39;&lt;/span>: csrf_token,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送 POST 请求进行登录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_response &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>post(login_url, data&lt;span style="color:#f92672">=&lt;/span>login_data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> login_response&lt;span style="color:#f92672">.&lt;/span>ok:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录成功&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录失败&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 登录成功后，访问受保护页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protected_page &lt;span style="color:#f92672">=&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>get(protected_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> protected_page&lt;span style="color:#f92672">.&lt;/span>ok:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;成功访问受保护的页面&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(protected_page&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;访问受保护页面失败&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>模拟登录</title><link>http://localhost:1313/posts/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</link><pubDate>Thu, 09 Jan 2025 14:22:35 +0800</pubDate><guid>http://localhost:1313/posts/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</guid><description>&lt;h1 id="基本原理">基本原理&lt;/h1>
&lt;p>通过模拟用户在浏览器中执行的登录操作，获取并维持用户的登录状态，从而访问需要身份认证的网页或数据。&lt;/p>
&lt;h2 id="发送登录请求">发送登录请求&lt;/h2>
&lt;p>用户在浏览器中提交登录表单时，会向服务器发送一个 HTTP 请求，这个请求通常是一个 &lt;strong>POST&lt;/strong> 请求，包含了用户输入的 &lt;strong>用户名&lt;/strong> 和 &lt;strong>密码&lt;/strong>，以及其他一些必要的字段（例如：CSRF token、验证码等）。&lt;/p>
&lt;h2 id="认证与验证">认证与验证&lt;/h2>
&lt;p>服务器收到登录请求后，会进行认证与验证，主要包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>检查用户名和密码是否正确&lt;/strong>：服务器会对比数据库中的用户数据，验证用户名和密码是否匹配。&lt;/li>
&lt;li>&lt;strong>CSRF token 检查&lt;/strong>：如果存在 CSRF 防护，服务器会验证请求中包含的 CSRF token 是否有效。这个 token 是防止跨站请求伪造攻击的标记。&lt;/li>
&lt;/ul>
&lt;h2 id="设置-cookie-或-token">设置 Cookie 或 Token&lt;/h2>
&lt;p>如果登录信息正确，服务器会在响应中设置一个 &lt;strong>Session cookie&lt;/strong> 或者返回一个 &lt;strong>JWT（JSON Web Token）&lt;/strong>。这些都是用来表示用户身份的认证信息。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Session cookie&lt;/strong>：通常在服务器端生成一个 session ID，并通过 cookie 返回给客户端。该 session ID 用于标识用户的会话，服务器会将会话信息（如用户身份）保存在内存或数据库中。&lt;/li>
&lt;li>&lt;strong>JWT&lt;/strong>：在某些情况下，服务器会返回一个 JWT，客户端需要在后续请求中带上这个 token，来证明自己已经登录。&lt;/li>
&lt;/ul>
&lt;h2 id="维护登录状态">维护登录状态&lt;/h2>
&lt;p>登录成功后，为了模拟用户持续登录的状态，爬虫需要维护登录过程中获取到的 &lt;strong>Session&lt;/strong> 或 &lt;strong>Cookie&lt;/strong>。通过在后续的 HTTP 请求中附带这些认证信息，爬虫可以继续访问需要登录权限的页面。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>保持会话（Session）&lt;/strong>：通过 HTTP 请求中的 &lt;strong>Cookie&lt;/strong>，爬虫可以维持与服务器的会话，这样就可以重复使用相同的登录状态进行多次请求。&lt;/li>
&lt;li>&lt;strong>使用 Token&lt;/strong>：如果使用的是 JWT 等 token 认证方式，爬虫则需要在后续请求的 &lt;strong>Authorization header&lt;/strong> 中附带 token。&lt;/li>
&lt;/ul>
&lt;h2 id="访问受保护的资源">访问受保护的资源&lt;/h2>
&lt;p>登录成功后，用户通常会被重定向到一个主页或其他受保护的页面。此时，爬虫只需要带上保存的 &lt;strong>Cookie&lt;/strong> 或 &lt;strong>Token&lt;/strong>，就可以访问这些页面。&lt;/p></description></item><item><title>基于JWT的模拟登录</title><link>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Ejwt%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</link><pubDate>Thu, 09 Jan 2025 02:15:35 +0800</pubDate><guid>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Ejwt%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</guid><description>&lt;p>&lt;strong>JWT（JSON Web Token）&lt;/strong> 的模拟登录通常用于无状态认证系统，尤其是在 RESTful API 和现代 web 应用中，广泛用于替代传统的基于 Session 的身份验证机制。JWT 是一种轻量级的认证机制，通常由服务器在用户登录时生成，并作为认证凭据返回给客户端。客户端通过存储和发送 JWT 来进行后续的身份验证。&lt;/p>
&lt;h1 id="jwt-的基本原理">JWT 的基本原理&lt;/h1>
&lt;p>WT 是由三部分组成的：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Header&lt;/strong>：指定 JWT 的类型（通常是 JWT）以及签名算法（如 HS256）。&lt;/li>
&lt;li>&lt;strong>Payload&lt;/strong>：包含声明（Claims），通常包括用户的基本信息（如 &lt;code>user_id&lt;/code>）和过期时间（&lt;code>exp&lt;/code>）。这些信息是未加密的，可以被任何人读取，但不能篡改。&lt;/li>
&lt;li>&lt;strong>Signature&lt;/strong>：使用密钥对 Header 和 Payload 进行签名，以防止数据被篡改。&lt;/li>
&lt;/ol>
&lt;h4 id="wt-工作流程">WT 工作流程：&lt;/h4>
&lt;ol>
&lt;li>用户使用用户名和密码发送请求进行登录。&lt;/li>
&lt;li>服务器验证用户信息后，生成一个包含用户信息的 JWT，并返回给客户端。&lt;/li>
&lt;li>客户端将 JWT 存储在本地（通常存储在 &lt;code>localStorage&lt;/code> 或 &lt;code>sessionStorage&lt;/code> 中，或者作为 HTTP cookie）。&lt;/li>
&lt;li>客户端在后续请求中将 JWT 放入请求头中，以便服务器验证该请求是否来自已认证的用户。&lt;/li>
&lt;/ol>
&lt;h1 id="基于-jwt-的模拟登录实现步骤">基于 JWT 的模拟登录实现步骤&lt;/h1>
&lt;p>主要步骤包括：&lt;/p>
&lt;ul>
&lt;li>向登录接口发送用户名和密码请求。&lt;/li>
&lt;li>服务器验证成功后返回 JWT。&lt;/li>
&lt;li>将 JWT 存储并用于后续请求中的身份验证。&lt;/li>
&lt;/ul>
&lt;h2 id="发送-post-请求获取-jwt">发送 POST 请求获取 JWT&lt;/h2>
&lt;p>首先，向服务器的登录 API 发送 POST 请求，提交用户名和密码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 登录接口 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://example.com/api/login&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 用户名和密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_data &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_username&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;password&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;your_password&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送 POST 请求进行登录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(login_url, json&lt;span style="color:#f92672">=&lt;/span>login_data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 检查登录是否成功&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>ok:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 解析返回的 JSON 响应，提取 JWT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>json()&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;token&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录成功，获取到的 JWT:&amp;#34;&lt;/span>, token)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;登录失败&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-jwt-访问受保护的资源">使用 JWT 访问受保护的资源&lt;/h2>
&lt;p>一旦获取到 JWT，下一步是将其用于后续的身份验证。在每个请求中，JWT 会被放置在请求头的 &lt;code>Authorization&lt;/code> 字段中。&lt;/p></description></item></channel></rss>